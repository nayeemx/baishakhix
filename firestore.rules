rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function roleLevel(role) {
      return role == 'super_user' ? 1
        : role == 'admin' ? 2
        : role == 'manager' ? 3
        : role == 'sales_man' ? 4
        : role == 'stock_boy' ? 5
        : role == 't_staff' ? 6
        : 7; // user
    }
    // User documents: users can read, create, and update their own document
    // Hierarchical role assignment
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && (
        // Users can update their own document
        request.auth.uid == userId || (
          // Hierarchical role assignment
          let requester = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
          let newRole = request.resource.data.role;
          // Only allow if:
          // - requester is not trying to set super_user for anyone else
          // - requester can only assign roles at or below their own level
          requester.role != null &&
          newRole != null &&
          requester.role != 'user' && // users can't assign roles
          newRole != 'super_user' &&
          roleLevel(newRole) >= roleLevel(requester.role) &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['role'])
        )
      );
    }
    // Settings documents: any authenticated user can read/write
    match /settings/{document=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
    // Uploads meta: allow all authenticated users to add meta data to uploads collection
    match /uploads/{docId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth != null;
    }
    match /uploads/{userId}/files/{docId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth != null && request.auth.uid == userId;
    }
    // Allow authenticated users to write/read to any collection named after a file (e.g., products, customers, etc.)
    match /{collectionName}/{docId} {
      allow read, write: if request.auth != null && (
        collectionName != "users" &&
        collectionName != "settings" &&
        collectionName != "uploads"
      );
    }
  }
} 